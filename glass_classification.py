# -*- coding: utf-8 -*-
"""glass_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jWAjxWGiuPUug4LkWXo1QXZ-t_yARYel
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
from google.colab import files
import seaborn as sn
import plotly.graph_objs as go
import chart_studio.plotly as py 
from plotly.graph_objs import *
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.cluster import KMeans, MeanShift, AffinityPropagation, DBSCAN
from sklearn.decomposition import PCA
from sklearn import metrics
from sklearn.metrics.cluster import homogeneity_score
from sklearn.metrics.cluster import completeness_score
from sklearn.metrics.cluster import v_measure_score

uploaded = files.upload()

# Density graph visualization

def scatter_with_color_dimension_graph(features , target , layout_labels):
    '''Scatter with color dimension graph to visualize the density of the Given feature with target:
        param feature 
        param target
        param layout_labels
        retrun
    '''
    trace1 = go.Scatter( y=features , mode='markers', marker=dict(size=6,color=target,colorscale='Viridis',showscale=True) )
    layout = go.Layout(title=layout_labels[2],xaxis=dict(title=layout_labels[0]), yaxis=dict(title=layout_labels[1]))
    data = [trace1]
    fig = Figure(data=data, layout=layout) 
    #print("images")
    fig.show()

def main():
    DATASET_PATH = './glass_data_labeled.csv'
    df = pd.read_csv(DATASET_PATH)
    features = df['Mg'] 
    targets = df['Type']
    xlabel = 'Data Index'
    ylabel = 'Mg Value'
    graph_title = 'Mg -- Glass Type Density Graph'
    graph_labels = [xlabel , ylabel , graph_title]
    scatter_with_color_dimension_graph(features , targets ,graph_labels)
    features = df['Si']
    ylabel = 'Si Value'
    graph_title = 'Si -- Glass Type Density Graph'
    graph_labels = [xlabel , ylabel , graph_title]
    scatter_with_color_dimension_graph(features , targets ,graph_labels)
    features = df['Na']
    ylabel = 'Na Value'
    graph_title = 'Na -- Glass Type Density Graph'
    graph_labels = [xlabel , ylabel , graph_title]
    scatter_with_color_dimension_graph(features , targets ,graph_labels)
    features = df['RI']
    ylabel = 'RI Value'
    graph_title = 'RI -- Glass Type Density Graph'
    graph_labels = [xlabel , ylabel , graph_title]
    scatter_with_color_dimension_graph(features , targets ,graph_labels)
    features = df['Al']
    ylabel = 'Al Value'
    graph_title = 'Al -- Glass Type Density Graph'
    graph_labels = [xlabel , ylabel , graph_title]
    scatter_with_color_dimension_graph(features , targets ,graph_labels)
    features = df['K']
    ylabel = 'K Value'
    graph_title = 'K -- Glass Type Density Graph'
    graph_labels = [xlabel , ylabel , graph_title]
    scatter_with_color_dimension_graph(features , targets ,graph_labels)
    features = df['Ba']
    ylabel = 'Ba Value'
    graph_title = 'Ba -- Glass Type Density Graph'
    graph_labels = [xlabel , ylabel , graph_title]
    scatter_with_color_dimension_graph(features , targets ,graph_labels)
    features = df['Ca']
    ylabel = 'Ca Value'
    graph_title = 'Ca -- Glass Type Density Graph'
    graph_labels = [xlabel , ylabel , graph_title]
    scatter_with_color_dimension_graph(features , targets ,graph_labels)
    features = df['Fe']
    ylabel = 'Fe Value'
    graph_title = 'Fe -- Glass Type Density Graph'
    graph_labels = [xlabel , ylabel , graph_title]
    scatter_with_color_dimension_graph(features , targets ,graph_labels)

if __name__ == "__main__":
  main ()

# read the dataset from .csv file

data_with_label = pd.read_csv('glass.csv')
data_withlabel = pd.DataFrame(data_with_label).to_numpy()

# taking out the labels

label = []
for i in range(len(data_withlabel)):
  label.append(data_withlabel[i][9])

data_without_label = pd.DataFrame.drop(data_with_label, columns='Type')

# create correlation matrix

corrmatrix = data_without_label.corr()
sn.heatmap(corrmatrix, annot=True)
#print(corrmatrix)
data = pd.DataFrame(data_without_label).to_numpy()
print(label)

# K-Means without PCA

kmeans = KMeans(n_clusters = 7,init='k-means++',n_init=5).fit(data)
kmeans.labels_
kmeans.predict(data)
arscore = metrics.adjusted_rand_score(label, kmeans.predict(data))
cscore = completeness_score(label, kmeans.predict(data))
hscore = homogeneity_score(label, kmeans.predict(data))
vscore = v_measure_score(label, kmeans.predict(data))
print(cscore, hscore, vscore,arscore)

# K-Means with PCA

data_pca = PCA(n_components=2).fit_transform(data)
kmeans_pca = KMeans(n_clusters = 7,init='k-means++',n_init=5)
kmeans_pca.fit(data_pca)
pred = kmeans_pca.predict(data_pca)
arscore = metrics.adjusted_rand_score(label, pred)
csore = completeness_score(label,pred) 
hscore = homogeneity_score(label, pred)
vscore = v_measure_score(label, pred)
print(cscore, hscore, vscore, arscore)

# Mean shift without PCA

meanshift = MeanShift().fit(data)
meanshift.labels_
arscore = metrics.adjusted_rand_score(label, meanshift.labels_)
cscore = completeness_score(label,meanshift.labels_) 
hscore = homogeneity_score(label, meanshift.labels_)
vscore = v_measure_score(label, meanshift.labels_)
print(cscore, hscore, vscore,arscore)

# Mean shift with PCA
data_pca = PCA(n_components=2).fit_transform(data)
meanshift_pca = MeanShift().fit(data_pca)
meanshift_pca.labels_
arscore = metrics.adjusted_rand_score(label, meanshift_pca.labels_)
cscore = completeness_score(label,meanshift_pca.labels_) 
hscore = homogeneity_score(label, meanshift_pca.labels_)
vscore = v_measure_score(label, meanshift_pca.labels_)
print(cscore, hscore, vscore,arscore)

# AffinityPropagation without PCA

ap = AffinityPropagation().fit(data)
ap.labels_
arscore = metrics.adjusted_rand_score(label, ap.labels_)
cscore = completeness_score(label,ap.labels_) 
hscore = homogeneity_score(label, ap.labels_)
vscore = v_measure_score(label, ap.labels_)
print(cscore, hscore, vscore,arscore)

# AffinityPropagation with PCA

ap_pca = AffinityPropagation().fit(data_pca)
ap_pca.labels_
arscore = metrics.adjusted_rand_score(label, ap_pca.labels_)
cscore = completeness_score(label, ap_pca.labels_) 
hscore = homogeneity_score(label, ap_pca.labels_)
vscore = v_measure_score(label, ap_pca.labels_)
print(cscore, hscore, vscore,arscore)